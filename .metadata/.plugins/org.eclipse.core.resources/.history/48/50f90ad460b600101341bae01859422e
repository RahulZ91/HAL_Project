#include "stm32f4xx_hal.h"
#include "main.h"

void SystemClockConfig(void);
void UART2_Init(void);
void Error_Handler(void);

UART_HandleTypeDef huart2;

int main(void)
{
	HAL_Init();
	SystemClockConfig(); // Application specification and not in HAL
	UART2_Init();         // High level initialization of UART2 peripheral

	return 0;
}

void SystemClockConfig(void)
{
	// function to configure special clock configuration
}

void UART2_Init(void)
{
	huart2.Instance = USART2_BASE;  // base address of the UART2 peripheral - this is the typedef in the handle - always has the base address of peripheral
	huart2.Init.BaudRate=115200;
	huart2.Init.WordLength=UART_WORDLENGTH_8B;
	huart2.Init.StopBits=UART_STOPBITS_1;
	huart2.Init.Parity=UART_PARITY_NONE;
	huart2.Init.HwFlowCtl=UART_HWCONTROL_NONE;
	huart2.Init.Mode=UART_MODE_TX_RX;

	// returns OK,ERROR,BUSY or TIMEOUT
	// In case of ERROR use the error handler defined
	if(HAL_UART_Init(&huart2) != HAL_OK )
	{
		Error_Handler();
	}
}

void Error_Handler(void)
{
	// Enable the clock for PORT A
	__HAL_RCC_GPIOA_CLK_ENABLE(); // enable the clock for GPIO Port A where the User LED LD2 is

	// Configure the LD2 as output
	GPIO_InitTypeDef GPIO_LED={0}; // prevents garbage values to be initialized to structure members
	GPIO_LED.Pin=GPIO_PIN_5;
	GPIO_LED.Pull=GPIO_NOPULL;  // since this is output so PULL UP is not required- PULLUP used only when input
	GPIO_LED.Speed=GPIO_SPEED_FREQ_LOW;
	GPIO_LED.Mode=GPIO_MODE_OUTPUT_PP;

	// GPIO_Init
	HAL_GPIO_Init(GPIOA,&GPIO_LED);

	// Toggle LED
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		HAL_Delay(500);
	}
	.
}
